{"version":3,"sources":["Square.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","style","backgroundColor","color","value","Board","renderSquare","i","lastHighlight","winnerHighlight","includes","key","squares","table","rows","j","push","board","App","useState","current","Array","fill","status","sendRequest","moves","state","setState","history","stepNumber","stateHistory","setHistory","useEffect","axios","post","then","res","data","step","updated_move","temp","Object","assign","map","move","desc","Math","random","margin","my_history","slice","jumpTo","concat","length","handleClick","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f4f1997.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport default function Square(props) {\n    return (\n        <button\n            className=\"square\"\n            onClick={props.onClick}\n            style={{ backgroundColor: props.color }}\n        > {props.value}\n        </button>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport Square from \"./Square\";\n\nexport default function Board(props) {\n    function renderSquare(i) {\n        let color = \"white\";\n        if (props.lastHighlight === i) {\n            color = \"green\";\n        }\n        if (props.winnerHighlight.includes(i)) {\n            color = \"red\"\n        }\n        return (\n            <Square\n                key={i}\n                value={props.squares[i]}\n                onClick={() => props.onClick(i)}\n                color={color}\n            />\n        );\n    }\n\n    function board() {\n        let table = []\n        for (let i = 0; i < 9; i += 3) {\n            let rows = []\n            for (let j = i; j < i + 3; j++) {\n                rows.push(renderSquare(j))\n            }\n            table.push(<div className=\"board-row\" key={i + 10}>{rows}</div>)\n        }\n        return table\n    }\n\n    return (\n        <div>\n            {board()}\n        </div>\n    );\n\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Board from './Board'\nimport axios from 'axios';\n\nexport default function App() {\n  let [state, setState] = useState({\n    current: Array(9).fill(null),\n    status: 'Your turn \"O\"',\n    lastHighlight: '',\n    sendRequest: false,\n    moves: []\n  });\n\n  let [stateHistory, setHistory] = useState({\n    history: [{\n      squares: Array(9).fill(null),\n    }],\n    stepNumber: 0,\n  })\n\n  // Similar to componentDidUpdate\n  useEffect(() => {\n    if (state.sendRequest) {\n      // https://my-third-app-dot-my-project-9894-281203.nn.r.appspot.com/getnextmove\n      axios.post(`http://127.0.0.1:5000/getnextmove`, { state })\n        .then(res => {\n          let data = res.data;\n          setState(data);\n        });\n    }\n  }, [state]);\n\n  // // Similar to componentDidUpdate\n  useEffect(() => {\n    let step = stateHistory.stepNumber;\n    let updated_move = stateHistory.history[step].squares;\n    let temp = {};\n    Object.assign(temp, state, { current: updated_move });\n    setState(temp);\n  }, [stateHistory]);\n\n  function handleClick(i) {\n    const squares = state.current;\n    if (state.status === 'Game tied!!' ||\n      state.status === 'O Won!!' ||\n      state.status === 'X Won!!') {\n      return\n    }\n    if (squares[i] !== null) {\n      return\n    }\n    if (setState.status === 'Bots Turn \"X\"') {\n      return\n    }\n\n    squares[i] = 'O';\n    const history = stateHistory.history\n    setState({\n      current: squares,\n      status: 'Bots Turn \"X\"',\n      lastHighlight: i,\n      sendRequest: true,\n      moves: []\n    });\n\n    setHistory({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n    })\n  }\n\n  let moves = stateHistory.history.map((step, move) => {\n    const desc = move ?\n      'Go to move #' + move :\n      'Go to game start';\n    return (\n      <li key={Math.random()} style={{ margin: \"5px\" }}>\n        <button\n          className=\"btn btn-outline-dark btn-sm\"\n          onClick={() => jumpTo(move, stateHistory.history)}\n        >{desc}</button>\n      </li>\n    );\n  });\n\n  function jumpTo(step, my_history) {\n    setHistory({\n      history: my_history.slice(0, step + 1),\n      stepNumber: step\n    });\n    let temp = {};\n    Object.assign(temp, state, { lastHighlight: \"\", moves: [] });\n    setState(temp);\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"col-lg-2\">\n        <Board squares={state.current}\n          onClick={(i) => handleClick(i)} lastHighlight={state.lastHighlight}\n          winnerHighlight={state.moves} />\n      </div>\n      <div className=\"col-lg-10\">\n        <div><b>You are player \"X\" and player \"O\" is a bot, enjoy playing.\n        Click the button below in order to retive the game back to specific move!!</b></div>\n        <div style={{ marginBottom: \"10px\" }}>{state.status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}